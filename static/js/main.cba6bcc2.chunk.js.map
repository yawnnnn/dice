{"version":3,"sources":["components/dice/dice.tsx","global/random.tsx","model/history.tsx","global/dice-util.tsx","components/dice/dice-main.tsx","components/preset/preset.tsx","model/preset.tsx","components/preset/preset-modal.tsx","components/preset/preset-list.tsx","components/history/history.tsx","components/history/history-list.tsx","components/main/main.tsx","components/main/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiceComponent","className","onClick","props","this","sides","React","Component","Random","Math","floor","random","Number","RollHistory","id","diceString","total","dateTime","isCritical","Date","valueOf","DiceUtil","obj","replace","split","forEach","dString","diceArray","toString","diceObj","Object","keys","map","key","join","DiceMainComponent","diceUtil","state","selected","selectedString","rolled","prevProps","prevState","JSON","stringify","dice","setState","parseDiceObject","parse","sSides","length","prop","numDice","i","x","roll","push","h","createCriticalDiceString","slice","reduce","a","v","now","onRoll","onClear","e","target","value","parseDiceString","select","Fragment","renderDice","onChange","changeSelectedString","onBlur","blurSelectedString","type","checked","toggleCritical","clear","PresetComponent","name","preset","num","onDelete","index","preventDefault","delete","Preset","PresetModalComponent","onSave","onClose","Modal","show","onHide","backdrop","animation","centered","size","Header","Title","Body","changeName","changeDiceString","Footer","Button","variant","close","save","PresetList","presets","showModal","onModalClose","onModalSave","p","onAdd","openModal","HistoryComponent","additionalClassString","history","toLocaleDateString","toLocaleTimeString","HistoryListComponent","Main","localStorage","getItem","updateDiceObj","addPreset","setItem","deletePreset","splice","addHistory","pop","unshift","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cba6bcc2.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps {\n    sides: number;\n    onClick: any;\n};\ninterface IState {};\n\nexport default class DiceComponent extends React.Component<IProps, IState> {\n    render () {\n        return (\n            <button className=\"btn btn-outline-primary\" onClick={() => this.props.onClick()}>{this.props.sides}</button>\n        );\n    }\n}\n","export class Random {\n    public roll(sides: number): number {\n        return Math.floor(Math.random() * Number(sides)) + 1;\n    }\n}","export class RollHistory {\n    public id: number;\n    public diceString: string;\n    public total: number;\n    public dateTime: number;\n    public isCritical: boolean;\n\n    constructor () {\n        this.id = 0;\n        this.diceString = '';\n        this.total = 0;\n        this.dateTime = new Date(2020, 0, 1).valueOf();\n        this.isCritical = false;\n    }\n}","export class DiceUtil {\n    /**\n     * Returns a dice object {'#': #, ...} from a dice string.\n     * @param diceString Must be of the form '1d20 + 2d10 ...'\n     */\n    public parseDiceString(diceString: string): {[key: string]: number} {\n        let obj: {[key: string]: number} = {};\n        if (!diceString || diceString === '') { return obj; } // TODO: Add more validation.\n        let selectedDiceArray = diceString.replace(' ', '').split('+');\n\n        selectedDiceArray.forEach(dString => {\n            let diceArray = dString.split('d'); // dString should be of the format #d# (e.g 2d6).\n            obj[diceArray[1].toString()] = Number(diceArray[0]);\n        });\n\n        return obj;\n    }\n\n    public parseDiceObject(diceObj: {[key: string]: number}): string {\n        return Object.keys(diceObj).map(key => diceObj[key] + 'd' + key).join(' + ' );\n    }\n\n    public createCriticalDiceString(diceString: string): string {\n        let critString = '';\n        if (!diceString || diceString === '') { return critString; } // TODO: Add more validation.\n        let selectedDiceArray = diceString.replace(' ', '').split('+');\n\n        return selectedDiceArray.map(dString => {\n            let diceArray = dString.split('d'); // dString should be of the format #d# (e.g 2d6).\n            let num = Number(diceArray[0]) * 2;\n            return num.toString() + 'd' + diceArray[1];\n        }).join(' + ');\n    }\n}","import React from 'react';\nimport DiceComponent from './dice';\nimport { Random } from '../../global/random';\nimport { RollHistory } from '../../model/history';\nimport { DiceUtil } from '../../global/dice-util';\n\ninterface IProps {\n    dice: {[key: string]: number};\n    onRoll: (h: RollHistory) => void;\n    onClear: (obj: any) => void;\n};\ninterface IState {\n    selected: {[key: string]: number};\n    selectedString: string;\n    rolled: Array<number>;\n    isCritical: boolean;\n};\n\nexport default class DiceMainComponent extends React.Component<IProps, IState> {\n    diceUtil = new DiceUtil();\n    state: IState = {\n        selected: {},\n        selectedString: '',\n        rolled: [],\n        isCritical: false\n    };\n\n    componentDidUpdate (prevProps: IProps, prevState: IState) {\n        if (JSON.stringify(prevProps.dice) !== JSON.stringify(this.props.dice)) {\n            this.setState({\n                selected: this.props.dice,\n                selectedString: this.diceUtil.parseDiceObject(this.props.dice)\n            });\n        }\n    }\n    \n    select (sides: number) {\n        let obj: {[key: string]: number} = JSON.parse(JSON.stringify(this.state.selected));\n        let sSides = sides.toString();\n        obj[sSides] = obj[sSides] ? obj[sSides] + 1 : 1;\n        let diceString = Object.keys(obj).map(key => obj[key] + 'd' + key).join(' + ');\n\n        this.setState({ selected: obj, selectedString: diceString });\n    }\n\n    roll () {\n        let rolled = [];\n        let obj = this.state.selected;\n\n        if (Object.keys(obj).length > 0) {\n            for (const prop in obj) {\n                let numDice = !this.state.isCritical ? obj[prop] : obj[prop] * 2;\n                for (let i = 0; i < numDice; i++) {\n                    let x = new Random().roll(Number(prop));\n                    rolled.push(x);\n                }\n            }\n    \n            this.setState({ rolled: rolled, isCritical: false });\n    \n            let h = new RollHistory();\n            h.id = 1;\n            h.diceString = this.state.isCritical ? this.diceUtil.createCriticalDiceString(this.state.selectedString.slice(0)) : this.state.selectedString;\n            h.total = rolled.reduce((a, v) => a + v, 0);\n            h.dateTime = new Date(Date.now()).valueOf();\n            h.isCritical = this.state.isCritical;\n            this.props.onRoll(h);\n        }\n    }\n\n    clear () {\n        this.setState({\n            selected: {},\n            selectedString: '',\n            rolled: []\n        });\n\n        this.props.onClear({});\n    }\n\n    changeSelectedString(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({selectedString: e.target.value});\n    }\n\n    blurSelectedString() {\n        if (this.state.selectedString && this.state.selectedString !== '') {\n            let obj = this.diceUtil.parseDiceString(this.state.selectedString.slice(0));\n            this.setState({selected: obj});\n        }\n    }\n\n    toggleCritical () {\n        this.setState({ isCritical: !this.state.isCritical });\n    }\n\n    renderDice (sides: number) {\n        return <DiceComponent sides={sides} onClick={() => this.select(sides)}></DiceComponent>\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <div className=\"results p-lg m-b-md\">\n                    {this.state.rolled.length === 1 ? this.state.rolled[0] : null}\n                    {this.state.rolled.length > 1 ? this.state.rolled.join(' + ') + ' = ' + this.state.rolled.reduce((a, v) => a + v, 0) : null}\n                </div>\n                <div>\n                    <div className=\"m-b\">\n                        <span className=\"m-r-sm\">{this.renderDice(4)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(6)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(8)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(10)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(20)}</span>\n                        <span >{this.renderDice(100)}</span>\n                    </div>\n                    <div className=\"m-b d-flex flex-row align-items-center\">\n                        <div className=\"flex-1 m-r\">\n                            <input \n                                className=\"text-center form-control m-r-sm\" \n                                value={this.state.selectedString} \n                                onChange={(e) => this.changeSelectedString(e)} \n                                onBlur={() => this.blurSelectedString()}>\n                            </input>\n                        </div>\n                        \n                        <input type=\"checkbox\" checked={this.state.isCritical} onChange={() => this.toggleCritical()}></input>\n                    </div>\n                    <div>\n                        <span className=\"m-r-sm\"><button className=\"btn btn-outline-dark\" onClick={() => this.clear()}>Clear</button></span>\n                        <button className=\"btn btn-outline-dark\" onClick={() => this.roll()}>Roll</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React from 'react';\nimport { Preset } from '../../model/preset';\n\ninterface IProps {\n    preset: Preset;\n    index: number;\n    onClick: (obj: any) => void;\n    onDelete: (index: number) => void;\n};\ninterface IState {\n    name: string;\n    diceString: string;\n};\n\nexport default class PresetComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: this.props.preset ? this.props.preset.name : '',\n        diceString: this.props.preset ? this.props.preset.diceString : ''\n    };\n\n    changeName (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({name: e.target.value});\n    }\n\n    changeDice (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({diceString: e.target.value});\n    }\n\n    parseDiceString (): any {\n        let obj: {[key: string]: number} = {};\n\n        if (this.state.diceString !== '') {\n            let x = this.state.diceString;\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]);\n                let sides = diceArray[1];\n                obj[sides.toString()] = num;\n            });\n        }\n\n        return obj;\n    }\n\n    delete (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onDelete(this.props.index);\n        e.preventDefault();\n    }\n\n    render () {\n        return (\n            <div className=\"list-group-item\">\n                <div className=\"d-flex flex-row align-items-center\">\n                    <div className=\"flex-1 d-flex flex-row\" onClick={() => this.props.onClick(this.parseDiceString())}>\n                        <span className=\"flex-1\">{this.state.name}</span>\n                        <span className=\"flex-1\">{this.state.diceString}</span>\n                    </div>\n                    <span><button className=\"btn btn-outline-danger btn-sm\" onClick={(e) => this.delete(e)}>Delete</button></span>\n                </div>\n            </div>\n        );\n    }\n}\n","export class Preset {\n    public id: number;\n    public name: string;\n    public diceString: string;\n\n    constructor () {\n        this.id = 0;\n        this.name = '';\n        this.diceString = '';\n    }\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\ninterface IProps {\n    show: boolean;\n    onClose: () => void;\n    onSave: (obj: any) => void;\n};\ninterface IState {\n    name: string,\n    diceString: string\n};\n\nexport default class PresetModalComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: '',\n        diceString: ''\n    };\n\n    changeName(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ name: e.target.value });\n    }\n\n    changeDiceString (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ diceString: e.target.value });\n    }\n\n    save () {\n        if (this.state.name === '' || this.state.diceString === '') {\n            return;\n        }\n\n        this.props.onSave({name: this.state.name, diceString: this.state.diceString});\n        this.setState({ name: '', diceString: '' });\n    }\n\n    close() {\n        this.setState({ name: '', diceString: '' });\n        this.props.onClose();\n    }\n\n    render () {\n        return (\n            <Modal show={this.props.show} onHide={this.props.onClose} backdrop={'static'} animation={false} centered size=\"sm\">\n                <Modal.Header>\n                    <Modal.Title>Add Preset</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"d-flex flex-row justify-content-between m-b-sm\">\n                        <div>Name</div>\n                        <div><input value={this.state.name} onChange={(e) => this.changeName(e)} ></input></div>\n                    </div>\n                    <div className=\"d-flex flex-row justify-content-between\">\n                        <div>Dice</div>\n                        <div><input value={this.state.diceString} onChange={(e) => this.changeDiceString(e)} ></input></div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.close()}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.save()}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","import React from 'react';\nimport PresetComponent from './preset';\nimport { Preset } from '../../model/preset';\nimport PresetModalComponent from './preset-modal';\n\ninterface IProps {\n    presets: Array<Preset>;\n    onAdd: (p: Preset) => void;\n    onDelete: (index: number) => void;\n    onClick: (obj: any) => void;\n};\ninterface IState {\n    presets: Array<Preset>;\n    showModal: boolean;\n};\n\nexport default class PresetList extends React.Component<IProps, IState> {\n    state: IState = {\n        presets: this.props.presets ? this.props.presets : [],\n        showModal: false\n    };\n\n    componentDidUpdate (prevProps: IProps, prevState: IState) {\n        if (JSON.stringify(prevProps.presets) !== JSON.stringify(this.props.presets)) {\n            this.setState({\n                presets: this.props.presets\n            });\n        }\n    }\n\n    openModal () {\n        this.setState({ showModal: true });\n    }\n\n    onModalClose = () => {\n        this.setState({ showModal: false });\n    }\n\n    onModalSave = (obj: any) => {\n        if (this.state.presets.length < 4) {\n            let x = this.state.presets.slice();\n            let p = new Preset();\n            p.id = x.length + 1;\n            p.name = obj.name;\n            p.diceString = obj.diceString;\n            x.push(p);\n            this.setState({presets: x, showModal: false});\n\n            this.props.onAdd(p);\n        } else {\n            this.setState({ showModal: false });\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <div className=\"d-flex flex-row align-items-center justify-content-between m-b-md\">\n                    <div className=\"font-semibold \">\n                        Presets\n                    </div>\n                    <button className=\"btn btn-sm btn-outline-dark\" onClick={() => this.openModal()}>Add</button>\n                </div>\n                <div className=\"list-group d-flex flex-column\">\n                    {this.state.presets.length === 0 ? <div className=\"list-group-item\">No Presets</div> : null}\n                    {this.state.presets.map((p, i) => {\n                        return <PresetComponent key={p.id} preset={p} index={i} onClick={this.props.onClick} onDelete={this.props.onDelete}></PresetComponent>\n                    })}\n                </div>\n\n                <PresetModalComponent show={this.state.showModal} onClose={this.onModalClose} onSave={this.onModalSave}></PresetModalComponent>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: RollHistory;\n};\ninterface IState {};\n\nexport default class HistoryComponent extends React.Component<IProps, IState> {\n    render () {\n        let additionalClassString = '';\n        if (this.props.history.isCritical) {\n            additionalClassString = 'list-group-item-danger';\n        }\n        \n        return (\n            <div className={\"list-group-item \" + additionalClassString}>\n                <div className=\"d-flex flex-row align-items-center\">\n                    <div className=\"flex-1 text-left text-xs\">\n                        {new Date(this.props.history.dateTime).toLocaleDateString() + ' ' + new Date(this.props.history.dateTime).toLocaleTimeString()}\n                        </div>\n                    <div className=\"flex-1\">{this.props.history.diceString}</div>\n                    <div className=\"flex-1\">{this.props.history.total}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport HistoryComponent from './history';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: Array<RollHistory>\n};\ninterface IState {\n\n};\n\nexport default class HistoryListComponent extends React.Component<IProps, IState> {\n    state: IState = {\n\n    };\n\n    render () {\n        return (\n            <div>\n                <div className=\"font-semibold text-left m-b-md\">\n                    History\n                </div>\n                <div className=\"list-group\">\n                    {this.props.history.length === 0 ? <div className=\"list-group-item\">No History</div> : null}\n                    {this.props.history.map((x, i) => <HistoryComponent key={x.id} history={x}></HistoryComponent>)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport DiceMainComponent from '../dice/dice-main';\nimport PresetList from '../preset/preset-list';\nimport HistoryListComponent from '../history/history-list';\nimport { Preset } from '../../model/preset';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {};\ninterface IState {\n    dice: {[key: string]: number},\n    presets: Array<Preset>,\n    history: Array<RollHistory>\n};\n\nexport default class Main extends React.Component<IProps, IState> {\n    state: IState = {\n        dice: {},\n        presets: JSON.parse(localStorage.getItem('presets') || \"[]\"),\n        history: JSON.parse(localStorage.getItem('history') || \"[]\")\n    };\n\n    updateDiceObj = (obj: any) => {\n        this.setState({ dice: obj });\n    }\n\n    addPreset = (p: Preset) => {\n        let x = this.state.presets.slice(0);\n        x.push(p);\n        this.setState({ presets: x });\n\n        localStorage.setItem('presets', JSON.stringify(x));\n    }\n\n    deletePreset = (index: number) => {\n        let x = this.state.presets.slice(0);\n        x.splice(index, 1);\n        this.setState({ presets: x });\n        localStorage.setItem('presets', JSON.stringify(x));\n    }\n\n    addHistory = (h: RollHistory) => {\n        h.id = this.state.history.length > 0 ? this.state.history[0].id + 1 : 1;\n\n        let x = this.state.history.splice(0);\n        if (x.length === 5) { x.pop(); }\n        x.unshift(h);\n        this.setState({ history: x });\n\n        localStorage.setItem('history', JSON.stringify(x));\n    }\n\n    render () {\n        return (\n            <div className=\"body\">\n                <div className=\"p-md fade-in\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-8 full-height d-flex m-b-md\">\n                            <div className=\"card flex-1 d-flex align-items-center justify-content-center p-lg\">\n                                <DiceMainComponent dice={this.state.dice} onRoll={this.addHistory} onClear={this.updateDiceObj}></DiceMainComponent>\n                            </div>\n                        </div>\n                        <div className=\"d-flex flex-column col-lg-4 m-b-md\">\n                            <div className=\"card m-b-md p-lg\">\n                                <PresetList presets={this.state.presets} \n                                    onClick={this.updateDiceObj} \n                                    onAdd={this.addPreset} \n                                    onDelete={this.deletePreset}>\n                                </PresetList>\n                            </div>\n                            <div className=\"card p-lg\">\n                                <HistoryListComponent history={this.state.history}></HistoryListComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"header\">\n        1.0.2\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Main from './components/main/main';\nimport Header from './components/main/header';\nimport './app.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}