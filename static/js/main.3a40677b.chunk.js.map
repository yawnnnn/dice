{"version":3,"sources":["components/dice/dice.tsx","global/random.tsx","model/history.tsx","components/dice/dice-main.tsx","components/preset/preset.tsx","model/preset.tsx","components/preset/preset-modal.tsx","components/preset/preset-list.tsx","components/history/history.tsx","components/history/history-list.tsx","components/main/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiceComponent","onClick","props","this","sides","React","Component","Random","Math","floor","random","Number","RollHistory","id","diceString","total","dateTime","Date","valueOf","DiceMainComponent","state","selected","selectedString","rolled","prevProps","prevState","JSON","stringify","dice","setState","parseDiceObj","obj","property","toString","selectedArray","prop","string","push","join","Object","keys","length","i","x","roll","h","now","onRoll","e","target","value","replace","split","forEach","diceArray","num","a","select","className","renderDice","onChange","changeSelectedString","onBlur","blurSelectedString","clear","PresetComponent","name","preset","parseDiceString","Preset","PresetModalComponent","onSave","Modal","show","onHide","onClose","backdrop","animation","centered","size","Header","Title","Body","changeName","changeDiceString","Footer","Button","variant","save","PresetList","presets","showModal","onModalClose","onModalSave","slice","p","onAdd","openModal","map","key","HistoryComponent","history","HistoryListComponent","Main","parse","localStorage","getItem","updateDiceObj","addPreset","setItem","addHistory","splice","shift","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a40677b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps {\n    sides: number;\n    onClick: any;\n};\ninterface IState {};\n\nexport default class DiceComponent extends React.Component<IProps, IState> {\n    render () {\n        return (\n            <button onClick={() => this.props.onClick()}>{this.props.sides}</button>\n        );\n    }\n}\n","export class Random {\n    public roll(sides: number): number {\n        return Math.floor(Math.random() * Number(sides)) + 1;\n    }\n}","export class RollHistory {\n    public id: number;\n    public diceString: string;\n    public total: number;\n    public dateTime: number;\n\n    constructor () {\n        this.id = 0;\n        this.diceString = '';\n        this.total = 0;\n        this.dateTime = new Date(2020, 0, 1).valueOf();\n    }\n}","import React from 'react';\nimport DiceComponent from './dice';\nimport { Random } from '../../global/random';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    dice: {[key: string]: number};\n    onRoll: (h: RollHistory) => void;\n};\ninterface IState {\n    selected: {[key: string]: number};\n    selectedString: string;\n    rolled: Array<number>;\n    total: number;\n};\n\nexport default class DiceMainComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        selected: {},\n        selectedString: '',\n        rolled: [],\n        total: 0\n    };\n\n    componentDidUpdate (prevProps: IProps, prevState: IState) {\n        if (JSON.stringify(prevProps.dice) !== JSON.stringify(this.props.dice)) {\n            this.setState({\n                selected: this.props.dice,\n                selectedString: this.parseDiceObj(this.props.dice)\n            });\n        }\n    }\n    \n    select (sides: number) {\n        let obj = this.state.selected;\n        let property = sides.toString();\n        obj[property] = obj[property] ? obj[property] + 1 : 1;\n\n        let selectedArray = [];\n        for (const prop in obj) {\n            let string = obj[prop].toString() + 'd' + prop;\n            selectedArray.push(string);\n        }\n        let selectedString = selectedArray.join(' + ')\n\n        this.setState({ selected: obj, selectedString: selectedString });\n    }\n\n    roll () {\n        let rolled = [];\n        let total = 0;\n        let obj = this.state.selected;\n\n        if (Object.keys(obj).length > 0) {\n            for (const prop in obj) {\n                for (let i = 0; i < obj[prop]; i++) {\n                    let x = new Random().roll(Number(prop));\n                    rolled.push(x);\n                    total += x;\n                }\n            }\n    \n            this.setState({ rolled: rolled, total: total });\n    \n            let h = new RollHistory();\n            h.id = 1;\n            h.diceString = this.state.selectedString;\n            h.total = total;\n            h.dateTime = new Date(Date.now()).valueOf();\n            this.props.onRoll(h);\n        }\n    }\n\n    clear () {\n        this.setState({\n            selected: {},\n            selectedString: '',\n            rolled: [],\n            total: 0\n        });\n    }\n\n    changeSelectedString(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({selectedString: e.target.value});\n    }\n\n    blurSelectedString() {\n        // TODO: Make the validation here more robust.\n        if (this.state.selectedString !== '') {\n            let obj: {[key: string]: number} = {};\n            let x = this.state.selectedString;\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]);\n                let sides = diceArray[1];\n                obj[sides.toString()] = num;\n            });\n\n            this.setState({selected: obj});\n        }\n    }\n\n    parseDiceObj (dice: any): string {\n        let a = [];\n\n        for (const prop in dice) {\n            let string = dice[prop].toString() + 'd' + prop;\n            a.push(string);\n        }\n        return a.join(' + ');\n    }\n\n    renderDice (sides: number) {\n        return <DiceComponent sides={sides} onClick={() => this.select(sides)}></DiceComponent>\n    }\n\n    render () {\n        return (\n            <div>\n                <div className=\"results m-b-md\">\n                    {this.state.rolled.length === 1 ? this.state.total : null}\n                    {this.state.rolled.length > 1 ? this.state.rolled.join(' + ') + ' = ' + this.state.total : null}\n                </div>\n                <div className=\"m-b\">\n                    <span className=\"m-r-sm\">{this.renderDice(4)}</span>\n                    <span className=\"m-r-sm\">{this.renderDice(6)}</span>\n                    <span className=\"m-r-sm\">{this.renderDice(8)}</span>\n                    <span className=\"m-r-sm\">{this.renderDice(10)}</span>\n                    <span className=\"m-r-sm\">{this.renderDice(20)}</span>\n                    <span className=\"m-r-sm\">{this.renderDice(100)}</span>\n                </div>\n                <div className=\"m-b\">\n                    <input \n                        className=\"text-center\" \n                        value={this.state.selectedString} \n                        onChange={(e) => this.changeSelectedString(e)} \n                        onBlur={() => this.blurSelectedString()}>\n                    </input>\n                </div>\n                <div>\n                    <span className=\"m-r-sm\"><button onClick={() => this.clear()}>Clear</button></span>\n                    <button onClick={() => this.roll()}>Roll</button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Preset } from '../../model/preset';\n\ninterface IProps {\n    preset: Preset;\n    onClick: (obj: any) => void\n};\ninterface IState {\n    name: string,\n    diceString: string\n};\n\nexport default class PresetComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: this.props.preset ? this.props.preset.name : '',\n        diceString: this.props.preset ? this.props.preset.diceString : ''\n    };\n\n    changeName (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({name: e.target.value});\n    }\n\n    changeDice (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({diceString: e.target.value});\n    }\n\n    parseDiceString (): any {\n        let obj: {[key: string]: number} = {};\n\n        if (this.state.diceString !== '') {\n            let x = this.state.diceString;\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]);\n                let sides = diceArray[1];\n                obj[sides.toString()] = num;\n            });\n        }\n\n        return obj;\n    }\n\n    render () {\n        return (\n            <div>\n                <span>{this.state.name}</span>\n                <span>{this.state.diceString}</span>\n                <button onClick={() => this.props.onClick(this.parseDiceString())}>Use</button>\n            </div>\n        );\n    }\n}\n","export class Preset {\n    public id: number;\n    public name: string;\n    public diceString: string;\n\n    constructor () {\n        this.id = 0;\n        this.name = '';\n        this.diceString = '';\n    }\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\ninterface IProps {\n    show: boolean;\n    onClose: () => void;\n    onSave: (obj: any) => void;\n};\ninterface IState {\n    name: string,\n    diceString: string\n};\n\nexport default class PresetModalComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: '',\n        diceString: ''\n    };\n\n    changeName(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ name: e.target.value });\n    }\n\n    changeDiceString (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ diceString: e.target.value });\n    }\n\n    save () {\n        this.props.onSave({name: this.state.name, diceString: this.state.diceString});\n    }\n\n    render () {\n        return (\n            <Modal show={this.props.show} onHide={this.props.onClose} backdrop={'static'} animation={false} centered size=\"sm\">\n                <Modal.Header>\n                    <Modal.Title>Add Preset</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <input value={this.state.name} onChange={(e) => this.changeName(e)} ></input>\n                    </div>\n                    <div>\n                        <input value={this.state.diceString} onChange={(e) => this.changeDiceString(e)} ></input>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.props.onClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.save()}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","import React from 'react';\nimport PresetComponent from './preset';\nimport { Preset } from '../../model/preset';\nimport PresetModalComponent from './preset-modal';\n\ninterface IProps {\n    presets: Array<Preset>;\n    onAdd: (p: Preset) => void;\n    onClick: (obj: any) => void;\n};\ninterface IState {\n    presets: Array<Preset>;\n    showModal: boolean;\n};\n\nexport default class PresetList extends React.Component<IProps, IState> {\n    state: IState = {\n        presets: this.props.presets ? this.props.presets : [],\n        showModal: false\n    };\n\n    openModal () {\n        this.setState({ showModal: true });\n    }\n\n    onModalClose = () => {\n        this.setState({ showModal: false });\n    }\n\n    onModalSave = (obj: any) => {\n        if (this.state.presets.length < 5) {\n            let x = this.state.presets.slice();\n            let p = new Preset();\n            p.id = x.length + 1;\n            p.name = obj.name;\n            p.diceString = obj.diceString;\n            x.push(p);\n            this.setState({presets: x, showModal: false});\n\n            this.props.onAdd(p);\n        } else {\n            this.setState({ showModal: false });\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <div className=\"d-flex flex-row justify-content-between\">\n                    <div>\n                        Presets\n                    </div>\n                    <button onClick={() => this.openModal()}>Add</button>\n                </div>\n                \n                {this.state.presets.map(p => {\n                    return <PresetComponent key={p.id} preset={p} onClick={this.props.onClick}></PresetComponent>\n                })}\n\n                <PresetModalComponent show={this.state.showModal} onClose={this.onModalClose} onSave={this.onModalSave}></PresetModalComponent>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: RollHistory;\n};\ninterface IState {\n\n};\n\nexport default class HistoryComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        \n    };\n\n    render () {\n        return (\n            <div>\n                {this.props.history.diceString + ' ' + this.props.history.total + ' ' + this.props.history.dateTime.toString()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport HistoryComponent from './history';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: Array<RollHistory>\n};\ninterface IState {\n\n};\n\nexport default class HistoryListComponent extends React.Component<IProps, IState> {\n    state: IState = {\n\n    };\n\n    render () {\n        return (\n            <div>\n                {this.props.history.map((x, i) => <HistoryComponent key={i} history={x}></HistoryComponent>)}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport DiceMainComponent from '../dice/dice-main';\nimport PresetList from '../preset/preset-list';\nimport HistoryListComponent from '../history/history-list';\nimport { Preset } from '../../model/preset';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {};\ninterface IState {\n    dice: {[key: string]: number},\n    presets: Array<Preset>,\n    history: Array<RollHistory>\n};\n\nexport default class Main extends React.Component<IProps, IState> {\n    state: IState = {\n        dice: {},\n        presets: JSON.parse(localStorage.getItem('presets') || \"[]\"),\n        history: JSON.parse(localStorage.getItem('history') || \"[]\")\n    };\n\n    updateDiceObj = (obj: any) => {\n        this.setState({ dice: obj });\n    }\n\n    addPreset = (p: Preset) => {\n        let x = JSON.parse(JSON.stringify(this.state.presets));\n        x.push(p);\n        this.setState({ presets: x });\n\n        localStorage.setItem('presets', JSON.stringify(x));\n    }\n\n    deletePreset () {\n\n    }\n\n    addHistory = (h: RollHistory) => {\n        let x = this.state.history.splice(0);\n        if (x.length === 5) { x.shift(); }\n        x.push(h);\n        this.setState({ history: x });\n\n        localStorage.setItem('history', JSON.stringify(x));\n    }\n\n    render () {\n        return (\n            <div className=\"full-height d-flex flex-row p\">\n                <div className=\"card flex-2 d-flex align-items-center justify-content-center m-r\">\n                    <DiceMainComponent dice={this.state.dice} onRoll={this.addHistory}></DiceMainComponent>\n                </div>\n                <div className=\"d-flex flex-column flex-1\">\n                    <div className=\"card flex-1 m-b p-lg\">\n                        <PresetList presets={this.state.presets} onClick={this.updateDiceObj} onAdd={this.addPreset}></PresetList>\n                    </div>\n                    <div className=\"card flex-1 d-flex align-items-center justify-content-center p-lg\">\n                        <HistoryListComponent history={this.state.history}></HistoryListComponent>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Main from './components/main/main';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"></div>\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}