{"version":3,"sources":["components/dice/dice.tsx","global/random.tsx","model/history.tsx","components/dice/dice-main.tsx","components/preset/preset.tsx","model/preset.tsx","components/preset/preset-modal.tsx","components/preset/preset-list.tsx","components/history/history.tsx","components/history/history-list.tsx","components/main/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiceComponent","className","onClick","props","this","sides","React","Component","Random","Math","floor","random","Number","RollHistory","id","diceString","total","dateTime","isCritical","Date","valueOf","DiceMainComponent","state","selected","selectedString","rolled","prevProps","prevState","JSON","stringify","dice","setState","parseDiceObj","obj","property","toString","selectedArray","prop","string","push","join","Object","keys","length","numDice","i","x","roll","h","generateFinalDiceString","now","onRoll","onClear","e","target","value","slice","replace","split","forEach","diceArray","num","s","stringArray","newArray","a","select","Fragment","renderDice","onChange","changeSelectedString","onBlur","blurSelectedString","type","checked","toggleCritical","clear","PresetComponent","name","preset","onDelete","index","preventDefault","parseDiceString","delete","Preset","PresetModalComponent","onSave","onClose","Modal","show","onHide","backdrop","animation","centered","size","Header","Title","Body","changeName","changeDiceString","Footer","Button","variant","close","save","PresetList","presets","showModal","onModalClose","onModalSave","p","onAdd","openModal","map","key","HistoryComponent","history","toLocaleDateString","toLocaleTimeString","HistoryListComponent","Main","parse","localStorage","getItem","updateDiceObj","addPreset","setItem","deletePreset","splice","addHistory","shift","unshift","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2873f14f.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps {\n    sides: number;\n    onClick: any;\n};\ninterface IState {};\n\nexport default class DiceComponent extends React.Component<IProps, IState> {\n    render () {\n        return (\n            <button className=\"btn btn-outline-primary\" onClick={() => this.props.onClick()}>{this.props.sides}</button>\n        );\n    }\n}\n","export class Random {\n    public roll(sides: number): number {\n        return Math.floor(Math.random() * Number(sides)) + 1;\n    }\n}","export class RollHistory {\n    public id: number;\n    public diceString: string;\n    public total: number;\n    public dateTime: number;\n    public isCritical: boolean;\n\n    constructor () {\n        this.id = 0;\n        this.diceString = '';\n        this.total = 0;\n        this.dateTime = new Date(2020, 0, 1).valueOf();\n        this.isCritical = false;\n    }\n}","import React from 'react';\nimport DiceComponent from './dice';\nimport { Random } from '../../global/random';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    dice: {[key: string]: number};\n    onRoll: (h: RollHistory) => void;\n    onClear: (obj: any) => void;\n};\ninterface IState {\n    selected: {[key: string]: number};\n    selectedString: string;\n    rolled: Array<number>;\n    total: number;\n    isCritical: boolean;\n};\n\nexport default class DiceMainComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        selected: {},\n        selectedString: '',\n        rolled: [],\n        total: 0,\n        isCritical: false\n    };\n\n    componentDidUpdate (prevProps: IProps, prevState: IState) {\n        if (JSON.stringify(prevProps.dice) !== JSON.stringify(this.props.dice)) {\n            this.setState({\n                selected: this.props.dice,\n                selectedString: this.parseDiceObj(this.props.dice)\n            });\n        }\n    }\n    \n    select (sides: number) {\n        let obj = this.state.selected;\n        let property = sides.toString();\n        obj[property] = obj[property] ? obj[property] + 1 : 1;\n\n        let selectedArray = [];\n        for (const prop in obj) {\n            let string = obj[prop].toString() + 'd' + prop;\n            selectedArray.push(string);\n        }\n        let selectedString = selectedArray.join(' + ')\n\n        this.setState({ selected: obj, selectedString: selectedString });\n    }\n\n    roll () {\n        let rolled = [];\n        let total = 0;\n        let obj = this.state.selected;\n\n        if (Object.keys(obj).length > 0) {\n            for (const prop in obj) {\n                let numDice = !this.state.isCritical ? obj[prop] : obj[prop] * 2;\n                for (let i = 0; i < numDice; i++) {\n                    let x = new Random().roll(Number(prop));\n                    rolled.push(x);\n                    total += x;\n                }\n            }\n    \n            this.setState({ rolled: rolled, total: total });\n    \n            let h = new RollHistory();\n            h.id = 1;\n            h.diceString = this.generateFinalDiceString();\n            h.total = total;\n            h.dateTime = new Date(Date.now()).valueOf();\n            h.isCritical = this.state.isCritical;\n            this.props.onRoll(h);\n        }\n    }\n\n    clear () {\n        this.setState({\n            selected: {},\n            selectedString: '',\n            rolled: [],\n            total: 0\n        });\n\n        this.props.onClear({});\n    }\n\n    changeSelectedString(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({selectedString: e.target.value});\n    }\n\n    blurSelectedString() {\n        // TODO: Make the validation here more robust.\n        if (this.state.selectedString !== '') {\n            let obj: {[key: string]: number} = {};\n            let x = this.state.selectedString.slice(0);\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]);\n                let sides = diceArray[1];\n                obj[sides.toString()] = num;\n            });\n\n            this.setState({selected: obj});\n        }\n    }\n\n    generateFinalDiceString (): string {\n        let s = '';\n\n        if (this.state.isCritical) {\n            let x = this.state.selectedString.slice(0);\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n            let newArray: Array<string> = [];\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]) * 2;\n                let sides = diceArray[1];\n                newArray.push(num.toString() + 'd' + sides);\n            });\n\n            s = newArray.join(' + ');\n        } else {\n            s = this.state.selectedString;\n        }\n\n        return s;\n    }\n\n    parseDiceObj (dice: any): string {\n        let a = [];\n\n        for (const prop in dice) {\n            let string = dice[prop].toString() + 'd' + prop;\n            a.push(string);\n        }\n        return a.join(' + ');\n    }\n\n    toggleCritical () {\n        this.setState({ isCritical: !this.state.isCritical });\n    }\n\n    renderDice (sides: number) {\n        return <DiceComponent sides={sides} onClick={() => this.select(sides)}></DiceComponent>\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <div className=\"results p-lg m-b-md\">\n                    {this.state.rolled.length === 1 ? this.state.total : null}\n                    {this.state.rolled.length > 1 ? this.state.rolled.join(' + ') + ' = ' + this.state.total : null}\n                </div>\n                <div>\n                    <div className=\"m-b\">\n                        <span className=\"m-r-sm\">{this.renderDice(4)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(6)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(8)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(10)}</span>\n                        <span className=\"m-r-sm\">{this.renderDice(20)}</span>\n                        <span >{this.renderDice(100)}</span>\n                    </div>\n                    <div className=\"m-b d-flex flex-row align-items-center\">\n                        <div className=\"flex-1 m-r\">\n                            <input \n                                className=\"text-center form-control m-r-sm\" \n                                value={this.state.selectedString} \n                                onChange={(e) => this.changeSelectedString(e)} \n                                onBlur={() => this.blurSelectedString()}>\n                            </input>\n                        </div>\n                        \n                        <input type=\"checkbox\" checked={this.state.isCritical} onChange={() => this.toggleCritical()}></input>\n                    </div>\n                    <div>\n                        <span className=\"m-r-sm\"><button className=\"btn btn-outline-dark\" onClick={() => this.clear()}>Clear</button></span>\n                        <button className=\"btn btn-outline-dark\" onClick={() => this.roll()}>Roll</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React from 'react';\nimport { Preset } from '../../model/preset';\n\ninterface IProps {\n    preset: Preset;\n    index: number;\n    onClick: (obj: any) => void;\n    onDelete: (index: number) => void;\n};\ninterface IState {\n    name: string;\n    diceString: string;\n};\n\nexport default class PresetComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: this.props.preset ? this.props.preset.name : '',\n        diceString: this.props.preset ? this.props.preset.diceString : ''\n    };\n\n    changeName (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({name: e.target.value});\n    }\n\n    changeDice (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({diceString: e.target.value});\n    }\n\n    parseDiceString (): any {\n        let obj: {[key: string]: number} = {};\n\n        if (this.state.diceString !== '') {\n            let x = this.state.diceString;\n            x = x.replace(' ', ''); // Remove spaces.\n            let stringArray = x.split('+');\n\n            stringArray.forEach(diceString => {\n                let diceArray = diceString.split('d');\n                let num = Number(diceArray[0]);\n                let sides = diceArray[1];\n                obj[sides.toString()] = num;\n            });\n        }\n\n        return obj;\n    }\n\n    delete (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onDelete(this.props.index);\n        e.preventDefault();\n    }\n\n    render () {\n        return (\n            <div className=\"list-group-item list-group-item-action\">\n                <div className=\"d-flex flex-row align-items-center\">\n                    <div className=\"flex-1 d-flex flex-row\" onClick={() => this.props.onClick(this.parseDiceString())}>\n                        <span className=\"flex-1\">{this.state.name}</span>\n                        <span className=\"flex-1\">{this.state.diceString}</span>\n                    </div>\n                    <span><button className=\"btn btn-outline-danger btn-sm\" onClick={(e) => this.delete(e)}>Delete</button></span>\n                </div>\n            </div>\n        );\n    }\n}\n","export class Preset {\n    public id: number;\n    public name: string;\n    public diceString: string;\n\n    constructor () {\n        this.id = 0;\n        this.name = '';\n        this.diceString = '';\n    }\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\ninterface IProps {\n    show: boolean;\n    onClose: () => void;\n    onSave: (obj: any) => void;\n};\ninterface IState {\n    name: string,\n    diceString: string\n};\n\nexport default class PresetModalComponent extends React.Component<IProps, IState> {\n    state: IState = {\n        name: '',\n        diceString: ''\n    };\n\n    changeName(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ name: e.target.value });\n    }\n\n    changeDiceString (e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ diceString: e.target.value });\n    }\n\n    save () {\n        if (this.state.name === '' || this.state.diceString === '') {\n            return;\n        }\n\n        this.props.onSave({name: this.state.name, diceString: this.state.diceString});\n        this.setState({ name: '', diceString: '' });\n    }\n\n    close() {\n        this.setState({ name: '', diceString: '' });\n        this.props.onClose();\n    }\n\n    render () {\n        return (\n            <Modal show={this.props.show} onHide={this.props.onClose} backdrop={'static'} animation={false} centered size=\"sm\">\n                <Modal.Header>\n                    <Modal.Title>Add Preset</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"d-flex flex-row justify-content-between m-b-sm\">\n                        <div>Name</div>\n                        <div><input value={this.state.name} onChange={(e) => this.changeName(e)} ></input></div>\n                    </div>\n                    <div className=\"d-flex flex-row justify-content-between\">\n                        <div>Dice</div>\n                        <div><input value={this.state.diceString} onChange={(e) => this.changeDiceString(e)} ></input></div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.close()}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.save()}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","import React from 'react';\nimport PresetComponent from './preset';\nimport { Preset } from '../../model/preset';\nimport PresetModalComponent from './preset-modal';\n\ninterface IProps {\n    presets: Array<Preset>;\n    onAdd: (p: Preset) => void;\n    onDelete: (index: number) => void;\n    onClick: (obj: any) => void;\n};\ninterface IState {\n    presets: Array<Preset>;\n    showModal: boolean;\n};\n\nexport default class PresetList extends React.Component<IProps, IState> {\n    state: IState = {\n        presets: this.props.presets ? this.props.presets : [],\n        showModal: false\n    };\n\n    componentDidUpdate (prevProps: IProps, prevState: IState) {\n        if (JSON.stringify(prevProps.presets) !== JSON.stringify(this.props.presets)) {\n            this.setState({\n                presets: this.props.presets\n            });\n        }\n    }\n\n    openModal () {\n        this.setState({ showModal: true });\n    }\n\n    onModalClose = () => {\n        this.setState({ showModal: false });\n    }\n\n    onModalSave = (obj: any) => {\n        if (this.state.presets.length < 4) {\n            let x = this.state.presets.slice();\n            let p = new Preset();\n            p.id = x.length + 1;\n            p.name = obj.name;\n            p.diceString = obj.diceString;\n            x.push(p);\n            this.setState({presets: x, showModal: false});\n\n            this.props.onAdd(p);\n        } else {\n            this.setState({ showModal: false });\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <div className=\"d-flex flex-row align-items-center justify-content-between m-b-md\">\n                    <div className=\"font-semibold \">\n                        Presets\n                    </div>\n                    <button className=\"btn btn-sm btn-outline-dark\" onClick={() => this.openModal()}>Add</button>\n                </div>\n                <div className=\"list-group d-flex flex-column\">\n                    {this.state.presets.map((p, i) => {\n                        return <PresetComponent key={p.id} preset={p} index={i} onClick={this.props.onClick} onDelete={this.props.onDelete}></PresetComponent>\n                    })}\n                </div>\n\n                <PresetModalComponent show={this.state.showModal} onClose={this.onModalClose} onSave={this.onModalSave}></PresetModalComponent>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: RollHistory;\n};\ninterface IState {};\n\nexport default class HistoryComponent extends React.Component<IProps, IState> {\n    render () {\n        return (\n            <div className={\"list-group-item \" + (this.props.history.isCritical ? 'list-group-item-danger' : '')}>\n                <div className=\"d-flex flex-row align-items-center\">\n                    <div className=\"flex-1 text-left text-xs\">\n                        {new Date(this.props.history.dateTime).toLocaleDateString() + ' ' + new Date(this.props.history.dateTime).toLocaleTimeString()}\n                        </div>\n                    <div className=\"flex-1\">{this.props.history.diceString}</div>\n                    <div className=\"flex-1\">{this.props.history.total}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport HistoryComponent from './history';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {\n    history: Array<RollHistory>\n};\ninterface IState {\n\n};\n\nexport default class HistoryListComponent extends React.Component<IProps, IState> {\n    state: IState = {\n\n    };\n\n    render () {\n        return (\n            <div>\n                <div className=\"font-semibold text-left m-b-md\">\n                    History\n                </div>\n                <div className=\"list-group\">\n                    {this.props.history.map((x, i) => <HistoryComponent key={i} history={x}></HistoryComponent>)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport DiceMainComponent from '../dice/dice-main';\nimport PresetList from '../preset/preset-list';\nimport HistoryListComponent from '../history/history-list';\nimport { Preset } from '../../model/preset';\nimport { RollHistory } from '../../model/history';\n\ninterface IProps {};\ninterface IState {\n    dice: {[key: string]: number},\n    presets: Array<Preset>,\n    history: Array<RollHistory>\n};\n\nexport default class Main extends React.Component<IProps, IState> {\n    state: IState = {\n        dice: {},\n        presets: JSON.parse(localStorage.getItem('presets') || \"[]\"),\n        history: JSON.parse(localStorage.getItem('history') || \"[]\")\n    };\n\n    updateDiceObj = (obj: any) => {\n        this.setState({ dice: obj });\n    }\n\n    addPreset = (p: Preset) => {\n        let x = this.state.presets.slice(0);\n        x.push(p);\n        this.setState({ presets: x });\n\n        localStorage.setItem('presets', JSON.stringify(x));\n    }\n\n    deletePreset = (index: number) => {\n        let x = this.state.presets.slice(0);\n        x.splice(index, 1);\n        this.setState({ presets: x });\n        localStorage.setItem('presets', JSON.stringify(x));\n    }\n\n    addHistory = (h: RollHistory) => {\n        let x = this.state.history.splice(0);\n        if (x.length === 5) { x.shift(); }\n        x.unshift(h);\n        this.setState({ history: x });\n\n        localStorage.setItem('history', JSON.stringify(x));\n    }\n\n    render () {\n        return (\n            <div className=\"body\">\n                <div className=\"p-md\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-8 full-height d-flex m-b-md\">\n                            <div className=\"card flex-1 d-flex align-items-center justify-content-center p-lg\">\n                                <DiceMainComponent dice={this.state.dice} onRoll={this.addHistory} onClear={this.updateDiceObj}></DiceMainComponent>\n                            </div>\n                        </div>\n                        <div className=\"d-flex flex-column col-lg-4 m-b-md\">\n                            <div className=\"card flex-1 m-b-md p-lg\">\n                                <PresetList presets={this.state.presets} \n                                    onClick={this.updateDiceObj} \n                                    onAdd={this.addPreset} \n                                    onDelete={this.deletePreset}>\n                                </PresetList>\n                            </div>\n                            <div className=\"card flex-1 p-lg\">\n                                <HistoryListComponent history={this.state.history}></HistoryListComponent>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Main from './components/main/main';\nimport './app.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"></div>\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}